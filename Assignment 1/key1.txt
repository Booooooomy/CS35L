Exercise 1.1: Moving around in Emacs
2. C-s H M-f
2. C-s s c M-b
4. C-s s e l f M-b
5. C-s a r r o w M-b
6. C-e
7. C-a
8. Yes
9. No, used Emacs shortcuts
10.C-x C-c

Exercise 1.2: Deleting text in Emac
2. C-s < ! - C-a C-k
3. C-s < ! C-a C-k
4. C-s < ! C-a C-k C-k C-k C-k C-k
5. C-s < ! C-b C-b C-u 7 C-d
   C-s < ! C-a C-k C-k C-k C-k C-k C-k C-k C-k
   C-s < ! C-a C-k
   C-x C-s C-x C-c

Exercise 1.3: Inserting text in Emacs
2. C-s A s s i g n m e n t C-f 2
   C-s A s s i g n m e n t C-f 2
3. C-s U T F - 8 M-% U S - A S C I I Enter y
4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-k
5. C-s < / o C-e C-o 
6. C-x C-s C-x C-c

Exercise 1.4: Other editing tasks in Emacs
3. M-> C-r - < C-f C-SP C-e C-w M-g g 3 9 8 C-y
4. C-s < ! C-b C-b C-SP C-e C-w M-g g 1 8 C-y
   C-s < ! C-s C-s C-a C-f C-SP C-e C-w M-g g 1 2 5 C-y
   M-> C-r < ! C-r C-SP C-n C-n C-n C-e C-w M-g g 3 8 3 C-y C-a C-d C-p C-d C-p C-d
   C-s < ! C-s C-s C-s C-a C-f C-SP C-e C-n C-n C-w M-g g 3 3 8 C-y C-a C-d C-p C-d
   M-> C-r < ! C-r C-r C-SP C-f C-f C-f C-f C-f C-f C-f C-w C-r i n g . M-f C-y
5. M-> C-r - - - C-SP M-> Backspace
6. C-x u
7. - - > C-r - - - Enter < !
8. M-< M-% < o l > Enter < o L > Enter ! 
   I found 7 occurrences.
   C-x X-s C-x C-c

Exercise 1.5: Doing commands in Emacs
1. M-x m a k e - d i r e c t o r y Enter j u n l Enter
2. C-x C-f j u n k / h e l l o . c Enter
   Copied & pasted code from website (Cmd-C Cmd-V)
3. M-x c o m p i l e C-a C-k g c c SP h e l l o . c Enter y
4. C-x b h e l l o - o u t
   C-u M-! . / a . o u t 
5.
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}
(Commands: C-SP M-> M-w C-x C-f M-d k TAB M-> C-y)
	   C-x C-s C-x C-c y

Exercise 1.6: Running Elisp code
1. C-x b Enter
2. ( r a n d o m SP " X X X - X X X - X X X " ) C-j
   Result: 1814583605557060552
3. ( s e t q SP x SP ( r a n d o m ) ) C-j
   ( s e t q SP y SP ( r a n d o m ) ) C-j
4. ( * SP x SP y ) C-j
   The result is incorrect (-198371459206560685 * -865491989878781680 /= 43760737082142768). This is most likely due to an overflow error.
5. M-: ( * SP x SP y ) C-j Enter
   The result is the same but the output also prints the octodecimal and hexadecimal notation of the number (43760737082142768 (#o2333602422470770060, #x9b782894e3f030)).
6. No, they're not truly random; they're pseudo-random. In the mathematical sense, numbers are truly random if picked between a range of negative to positive infinity. However, with computers, the numbers are picked from a finite range of values. In addition, random numbers are generated by a chosen seed that outputs the same random number always given the same seed. Therefore, results are seemingly random.
7. The probability that the two-variable product is wrong is nearly 100%. The product is mathematically incorrect whenever the product overflows. Taking the probability of the two-variable product of a 2-bit integer, 3-bit integer, 4-bit integer, etc., an exponential function can be fit by extending the number of bits. Since the range of random number is between "most-negative-fixnum" and "most-positive-fixnum", which are 62-bit integers, the probability of overflow is nearly 100%.
